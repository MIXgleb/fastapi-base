services:
  my_app:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: fastapi-app
    env_file:
      - .env
    volumes:
      - .:/app
    networks:
      - backend
    ports:
      - 8000:8000
    depends_on:
      db:
          condition: service_healthy
      redis:
          condition: service_healthy
      migration:
          condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
        test: sh -c "curl -f http://localhost:8000/health/check || exit 1"
        interval: 5s
        timeout: 5s
        retries: 10
        start_period: 15s
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

  redis:
    image: redis/redis-stack-server:latest
    container_name: redis-cache
    volumes:
        - type: volume
          source: cache-data
          target: /var/lib/redis/data/
    networks:
        - backend
    ports:
      - '6379:6379'
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 5s
        timeout: 5s
        retries: 10
    restart: unless-stopped

  db:
    image: postgres:17
    container_name: postgres-db
    environment:
      - POSTGRES_DB=test
      - POSTGRES_USER=gleb
      - POSTGRES_PASSWORD=1234
    volumes:
      - type: volume
        source: pg-data
        target: /var/lib/postgresql/data/
    networks:
      - backend
    ports:
      - '5435:5432'
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "postgres"]
        interval: 5s
        timeout: 5s
        retries: 15
    restart: unless-stopped

  migration:
    build:
        context: .
        dockerfile: ./Dockerfile
    env_file: .env
    networks:
        - backend
    depends_on:
        db:
            condition: service_healthy
    command: ["alembic", "upgrade", "head"]

volumes:
    pg-data:
    cache-data:
    broker-data:

networks:
    backend:
        driver: bridge